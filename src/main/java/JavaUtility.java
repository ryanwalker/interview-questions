import java.util.*;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'ryanw' at '3/25/16 10:31 AM' with Gradle 2.0
 *
 * @author ryanw, @date 3/25/16 10:31 AM
 */
public class JavaUtility {

    /**
     * Pares a string to an integer
     *
     * @param numberToParse - the word to convert
     * @return - the parsed number if conversion is possible, -1 otherwise
     */
    public int stringToInt(String numberToParse) {
        return 0;
    }

    /**
     * Reverse a word.
     *
     * doge -> egod
     *
     * @param word - the string to reverse
     * @return - the reversed string, with any leading or trailing whitespace removed
     */
    public String reverseString(String word) {
        return null;
    }

    /**
     * A palindrome is a word that is spelled the same forward or backward ('Bob',
     * @param word - the word that is being checked to see if it is a palindrome.
     * @return - true if word is a palindrome, false otherwise.
     */
    public boolean isPalindrome(String word) {
        return false;
    }

    /**
     * Count the number of characters in the word.
     * @param word - the string of characters to count
     * @return - a map where the key is a character and the value is the number of characters in the word
     */
    public Map<Character, Integer> numberOfOcurrencesOfCharactersInWord(String word) {
        return null;
    }

    /**
     * For 1 through 30:
     * Print Fizz if divisible by 3
     * print Buzz if divisible by 5
     * print FizzBuzz if divisible by 3 and 5
     */
    public List<String> fizzBuzz() {
        return null;
    }


    /**
     * Remove duplicates from the List
     * @param numbers - the list of numbers to remove duplicates from
    * @return - a list containing the numbers passed in, but with no duplicates.
     */
    public List<Integer> removeDuplicateNumbers(List<Integer> numbers) {
        return null;
    }


    /**
     * Sort contacts by lastName
     * @param contacts - a list of contacts to sort
     * @return - a list of contacts, sorted by last name.
     */
    public List<Contact> sortContacts(List<Contact> contacts) {
        return null;
    }


}
